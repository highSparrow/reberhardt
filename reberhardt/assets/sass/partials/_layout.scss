html {
    box-sizing: border-box;
}

*, *:before, *:after {
    box-sizing: inherit;
}

body {
    width: 100%;
    overflow-x:hidden;
}

@mixin vertical-center {
    position: relative;
    top: 50%;
    @include translateY(-50%);
}

.vertical-center {
    @include vertical-center;
}

#content {
    // #content is a container for child .page divs. Whenever user clicks a
    // page, the partial for the page will be loaded into a #content .page
    // div. These divs are absolutely positioned so that we can stack them all
    // on top of each other, and then when transitioning between pages, cross-
    // fade between the divs. #content also contains the loading spinner,
    // which is also absolutely positioned.

    position: relative;
    // With no page loaded (other than the home page), #content's height is 0.
    // When a page is loaded, this height will be modified in JS to be the
    // height of the child .page, since the child divs are absolutely
    // positioned and take no space in the flow
    height: 0;
    @include transition(height 0.5s ease-in-out);

    .loading-spinner {
        position: absolute;
        top: 1em;
        left: calc( 50% - #{$loading-spinner-size / 2} );
        opacity: 0;
        @include transition(opacity $fade-transition-time ease-in-out);
    }
    .loading-spinner.show {
        opacity: 1;
        // Pause ($page-transition-time - $fade-transition-time) before fading
        // in, in case the page loads within the fadeout duration (in which
        // case we don't need to show loading spinner)
        @include transition(opacity $fade-transition-time ease-in-out #{$page-transition-time - $fade-transition-time});
    }

    .page {
        opacity: 0;
        visibility: hidden;
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        @include transition(visibility $fade-transition-time, opacity $fade-transition-time ease-in-out 0s);
    }

    .page.show {
        opacity: 1;
        visibility: visible;
        // Wait $fade-transition-time/2 to start fading in, so that the other page has a chance
        // to fade out
        @include transition(visibility 0s, opacity $fade-transition-time ease-in-out #{$fade-transition-time/2});
    }
}

// When transitioning from the home page to some other page, we want #content
// to fade in and drift up
#content.firstload {
    opacity: 0;
    @include animation(fade-in-up-lg #{$page-transition-time/2} ease-out #{$page-transition-time/2} 1 forwards);

    .page.show {
        opacity: 1;
        visibility: visible;
        // The #content.firstload animation will take care of introducing the
        // page. Don't bother with fading the page in; that will just burn
        // extra CPU
        @include transition(none);
    }
}

// Fade in and drift up
@keyframes fade-in-up-lg {
    0% {
        @include transform(translateY(8em));
        opacity: 0;
    }
    100% {
        @include transform(translateY(0em));
        opacity: 1;
    }
}

.section {
    width: 1000px;
    margin-left: auto;
    margin-right: auto;
    padding: 1em;
    position: relative;
}
